// Prisma schema for AutoGen Financial Intelligence Demo
// Maps to conversation_models.py Pydantic models

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management integrated with Clerk authentication
model User {
  id            String   @id @default(cuid())
  clerkId       String   @unique
  email         String?
  firstName     String?
  lastName      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  conversations Conversation[]

  @@map("users")
}

// Core conversation session - maps to ConversationSession Pydantic model
model Conversation {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Content source information - maps to ContentSource Pydantic model
  contentType         String   // ContentSourceType enum: "text", "substack_article", "youtube_video", etc.
  contentTitle        String   @db.VarChar(500)
  contentContent      String   @db.Text  // Main content text
  contentUrl          String?
  contentAuthor       String?  @db.VarChar(200)
  contentPublishedAt  DateTime?
  contentMetadata     Json     @default("{}")

  // Conversation state - maps to ConversationStatus enum
  status              String   @default("initialized") // "initialized", "running", "paused", "completed", "error", "cancelled"
  consensusReached    Boolean  @default(false)
  finalRecommendation String?  @db.Text
  confidenceScore     Float?   @db.Real

  // Timing
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  completedAt         DateTime?

  // Metadata for additional conversation data
  metadata            Json     @default("{}")

  // Relationships
  messages            AgentMessage[]

  // Performance indexes for common query patterns
  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@index([contentType, createdAt])
  @@map("conversations")
}

// Individual agent messages within conversations - maps to AgentMessage Pydantic model
model AgentMessage {
  id               String       @id @default(cuid())
  conversationId   String
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // Agent information - maps to AgentType enum
  agentType        String       // "financial_analyst", "market_context", "risk_challenger"
  agentName        String       @db.VarChar(100)

  // Message content
  content          String       @db.Text
  confidenceLevel  Float?       @db.Real
  messageOrder     Int

  // References and sources - arrays for financial analysis citations
  citedSources     String[]     @default([])
  signalReferences String[]     @default([])

  // Timing
  timestamp        DateTime     @default(now())

  // Metadata for additional message data
  metadata         Json         @default("{}")

  // Performance indexes for conversation retrieval and agent analysis
  @@index([conversationId, messageOrder])
  @@index([agentType, timestamp])
  @@index([timestamp])
  @@map("agent_messages")
}

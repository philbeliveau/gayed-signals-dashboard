'use client';

import React, { useState } from 'react';
import {
  Download,
  FileText,
  Image,
  Share2,
  Copy,
  CheckCircle,
  Calendar,
  Clock,
  User,
  MessageSquare
} from 'lucide-react';
import { TextAnalysisResponse } from '../../types/agents';

interface ConversationExportProps {
  analysisResult: TextAnalysisResponse;
  agentConversation: any[];
  contentType: 'text' | 'substack' | 'youtube';
  className?: string;
}

type ExportFormat = 'markdown' | 'json' | 'pdf' | 'txt';

export function ConversationExport({
  analysisResult,
  agentConversation,
  contentType,
  className = ''
}: ConversationExportProps) {
  const [selectedFormat, setSelectedFormat] = useState<ExportFormat>('markdown');
  const [isExporting, setIsExporting] = useState(false);
  const [copied, setCopied] = useState(false);

  const formatOptions = [
    {
      format: 'markdown' as ExportFormat,
      icon: <FileText className="w-4 h-4" />,
      label: 'Markdown',
      description: 'Rich text format for documentation'
    },
    {
      format: 'json' as ExportFormat,
      icon: <FileText className="w-4 h-4" />,
      label: 'JSON',
      description: 'Structured data format'
    },
    {
      format: 'pdf' as ExportFormat,
      icon: <Image className="w-4 h-4" />,
      label: 'PDF',
      description: 'Professional document format'
    },
    {
      format: 'txt' as ExportFormat,
      icon: <FileText className="w-4 h-4" />,
      label: 'Plain Text',
      description: 'Simple text format'
    }
  ];

  const generateMarkdown = () => {
    const timestamp = new Date().toISOString();
    const contentTypeLabel = contentType.charAt(0).toUpperCase() + contentType.slice(1);

    return `# AutoGen Agent Analysis Report

## Analysis Overview
- **Content Type**: ${contentTypeLabel}
- **Analysis Date**: ${new Date().toLocaleDateString()}
- **Processing Time**: ${Math.round(analysisResult.data.processingMetrics.totalProcessingTime / 1000)}s
- **Relevance Score**: ${Math.round(analysisResult.data.relevanceScore * 100)}%
- **Consensus Confidence**: ${Math.round(analysisResult.data.autoGenConversation.confidenceScore * 100)}%

## Agent Conversation

${agentConversation.map((message, index) => `
### ${message.agentName} (${message.agentType})
**Time**: ${new Date(message.timestamp).toLocaleString()}
**Confidence**: ${message.confidence ? Math.round(message.confidence * 100) + '%' : 'N/A'}

${message.message}

---
`).join('')}

## Final Consensus

${analysisResult.data.autoGenConversation.consensus}

---

*Generated by AutoGen Financial Intelligence Platform*
*Export Date: ${new Date().toLocaleString()}*
`;
  };

  const generateJSON = () => {
    return JSON.stringify({
      exportMetadata: {
        exportDate: new Date().toISOString(),
        contentType,
        version: '1.0'
      },
      analysisOverview: {
        relevanceScore: analysisResult.data.relevanceScore,
        consensusConfidence: analysisResult.data.autoGenConversation.confidenceScore,
        processingMetrics: analysisResult.data.processingMetrics
      },
      agentConversation: agentConversation.map(message => ({
        agentName: message.agentName,
        agentType: message.agentType,
        role: message.role,
        message: message.message,
        confidence: message.confidence,
        timestamp: message.timestamp
      })),
      consensus: {
        text: analysisResult.data.autoGenConversation.consensus,
        confidenceScore: analysisResult.data.autoGenConversation.confidenceScore
      }
    }, null, 2);
  };

  const generatePlainText = () => {
    const contentTypeLabel = contentType.charAt(0).toUpperCase() + contentType.slice(1);

    return `AUTOGEN AGENT ANALYSIS REPORT

Content Type: ${contentTypeLabel}
Analysis Date: ${new Date().toLocaleDateString()}
Processing Time: ${Math.round(analysisResult.data.processingMetrics.totalProcessingTime / 1000)}s
Relevance Score: ${Math.round(analysisResult.data.relevanceScore * 100)}%
Consensus Confidence: ${Math.round(analysisResult.data.autoGenConversation.confidenceScore * 100)}%

AGENT CONVERSATION
==================

${agentConversation.map((message, index) => `
${index + 1}. ${message.agentName} (${message.agentType})
   Time: ${new Date(message.timestamp).toLocaleString()}
   Confidence: ${message.confidence ? Math.round(message.confidence * 100) + '%' : 'N/A'}

   ${message.message}

`).join('')}

FINAL CONSENSUS
===============

${analysisResult.data.autoGenConversation.consensus}

---
Generated by AutoGen Financial Intelligence Platform
Export Date: ${new Date().toLocaleString()}
`;
  };

  const getExportContent = () => {
    switch (selectedFormat) {
      case 'markdown':
        return generateMarkdown();
      case 'json':
        return generateJSON();
      case 'txt':
        return generatePlainText();
      default:
        return generateMarkdown();
    }
  };

  const handleExport = async () => {
    setIsExporting(true);

    try {
      const content = getExportContent();
      const filename = `autogen-analysis-${Date.now()}.${selectedFormat}`;

      if (selectedFormat === 'pdf') {
        // PDF generation would require additional library
        // For now, fall back to markdown
        const markdownContent = generateMarkdown();
        downloadFile(markdownContent, `autogen-analysis-${Date.now()}.md`, 'text/markdown');
      } else {
        const mimeType = selectedFormat === 'json' ? 'application/json' : 'text/plain';
        downloadFile(content, filename, mimeType);
      }
    } catch (error) {
      console.error('Export failed:', error);
    } finally {
      setIsExporting(false);
    }
  };

  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleCopyToClipboard = async () => {
    try {
      const content = getExportContent();
      await navigator.clipboard.writeText(content);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Copy to clipboard failed:', error);
    }
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'AutoGen Agent Analysis',
          text: analysisResult.data.autoGenConversation.consensus,
          url: window.location.href
        });
      } catch (error) {
        console.error('Share failed:', error);
      }
    } else {
      // Fallback to copy
      handleCopyToClipboard();
    }
  };

  return (
    <div className={`bg-theme-card border border-theme-border rounded-theme p-6 ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <Download className="w-6 h-6 text-theme-primary" />
          <div>
            <h3 className="text-lg font-semibold text-theme-text">Export Analysis</h3>
            <p className="text-sm text-theme-text-muted">
              Save or share your AutoGen conversation results
            </p>
          </div>
        </div>
        <div className="flex items-center space-x-2 text-sm text-theme-text-muted">
          <MessageSquare className="w-4 h-4" />
          <span>{agentConversation.length} messages</span>
        </div>
      </div>

      {/* Export Format Selection */}
      <div className="mb-6">
        <label className="block text-sm font-medium text-theme-text mb-3">
          Export Format
        </label>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          {formatOptions.map(({ format, icon, label, description }) => (
            <button
              key={format}
              onClick={() => setSelectedFormat(format)}
              className={`flex flex-col items-center p-4 border rounded-theme transition-all ${
                selectedFormat === format
                  ? 'border-theme-primary bg-theme-primary/10 text-theme-primary'
                  : 'border-theme-border bg-theme-card-secondary text-theme-text hover:border-theme-border-hover'
              }`}
            >
              {icon}
              <span className="font-medium text-sm mt-2">{label}</span>
              <span className="text-xs opacity-75 text-center mt-1">{description}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Export Preview */}
      <div className="mb-6">
        <div className="flex items-center justify-between mb-3">
          <span className="text-sm font-medium text-theme-text">Preview</span>
          <div className="flex items-center space-x-2 text-xs text-theme-text-muted">
            <Calendar className="w-3 h-3" />
            <span>{new Date().toLocaleDateString()}</span>
            <Clock className="w-3 h-3" />
            <span>{new Date().toLocaleTimeString()}</span>
          </div>
        </div>
        <div className="bg-theme-card-secondary border border-theme-border rounded-theme p-4 max-h-48 overflow-y-auto">
          <pre className="text-sm text-theme-text-muted font-mono whitespace-pre-wrap">
            {getExportContent().substring(0, 500)}
            {getExportContent().length > 500 && '...'}
          </pre>
        </div>
      </div>

      {/* Export Actions */}
      <div className="flex flex-col sm:flex-row gap-3">
        <button
          onClick={handleExport}
          disabled={isExporting}
          className="flex-1 inline-flex items-center justify-center px-4 py-3 bg-theme-primary text-white rounded-theme hover:bg-theme-primary-dark disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {isExporting ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              Exporting...
            </>
          ) : (
            <>
              <Download className="w-4 h-4 mr-2" />
              Download {selectedFormat.toUpperCase()}
            </>
          )}
        </button>

        <button
          onClick={handleCopyToClipboard}
          className="inline-flex items-center justify-center px-4 py-3 bg-theme-card-secondary text-theme-text border border-theme-border rounded-theme hover:bg-theme-card-hover transition-colors"
        >
          {copied ? (
            <>
              <CheckCircle className="w-4 h-4 mr-2 text-theme-success" />
              Copied!
            </>
          ) : (
            <>
              <Copy className="w-4 h-4 mr-2" />
              Copy
            </>
          )}
        </button>

        <button
          onClick={handleShare}
          className="inline-flex items-center justify-center px-4 py-3 bg-theme-card-secondary text-theme-text border border-theme-border rounded-theme hover:bg-theme-card-hover transition-colors"
        >
          <Share2 className="w-4 h-4 mr-2" />
          Share
        </button>
      </div>

      {/* Export Statistics */}
      <div className="mt-6 grid grid-cols-3 gap-4 pt-6 border-t border-theme-border">
        <div className="text-center">
          <div className="text-2xl font-bold text-theme-text">
            {Math.round(analysisResult.data.relevanceScore * 100)}%
          </div>
          <div className="text-xs text-theme-text-muted">Relevance</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-theme-text">
            {agentConversation.length}
          </div>
          <div className="text-xs text-theme-text-muted">Messages</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-theme-text">
            {Math.round(analysisResult.data.processingMetrics.totalProcessingTime / 1000)}s
          </div>
          <div className="text-xs text-theme-text-muted">Time</div>
        </div>
      </div>
    </div>
  );
}

export default ConversationExport;

/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  clerkUserId: 'clerkUserId',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.AgentSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionTitle: 'sessionTitle',
  contentType: 'contentType',
  contentSource: 'contentSource',
  contentUrl: 'contentUrl',
  contentText: 'contentText',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  metadata: 'metadata'
};

exports.Prisma.AgentMessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  agentType: 'agentType',
  messageContent: 'messageContent',
  messageOrder: 'messageOrder',
  timestamp: 'timestamp',
  confidence: 'confidence',
  sources: 'sources',
  metadata: 'metadata'
};

exports.Prisma.ConversationExportScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  exportFormat: 'exportFormat',
  exportedAt: 'exportedAt',
  filePath: 'filePath',
  downloadUrl: 'downloadUrl',
  expiresAt: 'expiresAt'
};

exports.Prisma.SignalCacheScalarFieldEnum = {
  id: 'id',
  signalType: 'signalType',
  signalValue: 'signalValue',
  confidence: 'confidence',
  timestamp: 'timestamp',
  expiresAt: 'expiresAt',
  metadata: 'metadata',
  source: 'source'
};

exports.Prisma.UserSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subscriptionType: 'subscriptionType',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  metadata: 'metadata'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ContentType = exports.$Enums.ContentType = {
  SUBSTACK_ARTICLE: 'SUBSTACK_ARTICLE',
  YOUTUBE_VIDEO: 'YOUTUBE_VIDEO',
  DIRECT_TEXT: 'DIRECT_TEXT',
  RESEARCH_REPORT: 'RESEARCH_REPORT',
  MARKET_COMMENTARY: 'MARKET_COMMENTARY'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  INITIALIZED: 'INITIALIZED',
  PROCESSING: 'PROCESSING',
  AGENT_DEBATE: 'AGENT_DEBATE',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.AgentType = exports.$Enums.AgentType = {
  FINANCIAL_ANALYST: 'FINANCIAL_ANALYST',
  MARKET_CONTEXT: 'MARKET_CONTEXT',
  RISK_CHALLENGER: 'RISK_CHALLENGER',
  SYSTEM_ORCHESTRATOR: 'SYSTEM_ORCHESTRATOR'
};

exports.ExportFormat = exports.$Enums.ExportFormat = {
  PDF: 'PDF',
  JSON: 'JSON',
  MARKDOWN: 'MARKDOWN',
  HTML: 'HTML',
  CSV: 'CSV'
};

exports.Prisma.ModelName = {
  User: 'User',
  AgentSession: 'AgentSession',
  AgentMessage: 'AgentMessage',
  ConversationExport: 'ConversationExport',
  SignalCache: 'SignalCache',
  UserSubscription: 'UserSubscription'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/philippebeliveau/Desktop/Notebook/gayed-signals-dashboard/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/philippebeliveau/Desktop/Notebook/gayed-signals-dashboard/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// UUID-Safe User Management (prevents Clerk ID conversion bugs)\nmodel User {\n  id          String    @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  clerkUserId String    @unique @map(\"clerk_user_id\")\n  email       String    @unique\n  firstName   String?   @map(\"first_name\")\n  lastName    String?   @map(\"last_name\")\n  imageUrl    String?   @map(\"image_url\")\n  isActive    Boolean   @default(true) @map(\"is_active\")\n  preferences Json?\n  createdAt   DateTime  @default(now()) @map(\"created_at\")\n  updatedAt   DateTime  @updatedAt @map(\"updated_at\")\n  lastLoginAt DateTime? @map(\"last_login_at\")\n\n  // Relations\n  agentSessions       AgentSession[]\n  conversationExports ConversationExport[]\n  userSubscriptions   UserSubscription[]\n\n  @@map(\"users\")\n}\n\n// Agent Conversation Management\nmodel AgentSession {\n  id            String        @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  userId        String?       @map(\"user_id\") @db.Uuid\n  sessionTitle  String        @map(\"session_title\")\n  contentType   ContentType   @map(\"content_type\")\n  contentSource String        @map(\"content_source\")\n  contentUrl    String?       @map(\"content_url\")\n  contentText   String        @map(\"content_text\")\n  status        SessionStatus @default(INITIALIZED)\n  startedAt     DateTime      @default(now()) @map(\"started_at\")\n  completedAt   DateTime?     @map(\"completed_at\")\n  metadata      Json?\n\n  // Relations\n  user     User?                @relation(fields: [userId], references: [id], onDelete: SetNull)\n  messages AgentMessage[]\n  exports  ConversationExport[]\n\n  @@map(\"agent_sessions\")\n}\n\n// Individual agent messages in conversations\nmodel AgentMessage {\n  id             String    @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  sessionId      String    @map(\"session_id\") @db.Uuid\n  agentType      AgentType @map(\"agent_type\")\n  messageContent String    @map(\"message_content\")\n  messageOrder   Int       @map(\"message_order\")\n  timestamp      DateTime  @default(now())\n  confidence     Float?\n  sources        Json?\n  metadata       Json?\n\n  // Relations\n  session AgentSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n\n  @@index([sessionId, messageOrder])\n  @@map(\"agent_messages\")\n}\n\n// Export tracking for conversations\nmodel ConversationExport {\n  id           String       @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  sessionId    String       @map(\"session_id\") @db.Uuid\n  userId       String?      @map(\"user_id\") @db.Uuid\n  exportFormat ExportFormat @map(\"export_format\")\n  exportedAt   DateTime     @default(now()) @map(\"exported_at\")\n  filePath     String?      @map(\"file_path\")\n  downloadUrl  String?      @map(\"download_url\")\n  expiresAt    DateTime?    @map(\"expires_at\")\n\n  // Relations\n  session AgentSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n  user    User?        @relation(fields: [userId], references: [id], onDelete: SetNull)\n\n  @@map(\"conversation_exports\")\n}\n\n// Market signal cache for agent context\nmodel SignalCache {\n  id          String   @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  signalType  String   @map(\"signal_type\")\n  signalValue Float    @map(\"signal_value\")\n  confidence  Float    @default(0.5)\n  timestamp   DateTime @default(now())\n  expiresAt   DateTime @map(\"expires_at\")\n  metadata    Json?\n  source      String?\n\n  @@index([signalType, timestamp])\n  @@index([expiresAt])\n  @@map(\"signal_cache\")\n}\n\n// User subscription management\nmodel UserSubscription {\n  id               String    @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  userId           String    @map(\"user_id\") @db.Uuid\n  subscriptionType String    @map(\"subscription_type\")\n  status           String    @default(\"active\")\n  startDate        DateTime  @default(now()) @map(\"start_date\")\n  endDate          DateTime? @map(\"end_date\")\n  metadata         Json?\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"user_subscriptions\")\n}\n\n// Enums\nenum ContentType {\n  SUBSTACK_ARTICLE\n  YOUTUBE_VIDEO\n  DIRECT_TEXT\n  RESEARCH_REPORT\n  MARKET_COMMENTARY\n}\n\nenum SessionStatus {\n  INITIALIZED\n  PROCESSING\n  AGENT_DEBATE\n  COMPLETED\n  FAILED\n  CANCELLED\n}\n\nenum AgentType {\n  FINANCIAL_ANALYST\n  MARKET_CONTEXT\n  RISK_CHALLENGER\n  SYSTEM_ORCHESTRATOR\n}\n\nenum ExportFormat {\n  PDF\n  JSON\n  MARKDOWN\n  HTML\n  CSV\n}\n",
  "inlineSchemaHash": "fb8df0e872054ec4d0a37dbc61f6fda9168c919a7c77c153072e4fcb0597c7c5",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clerkUserId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"clerk_user_id\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"first_name\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"last_name\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"image_url\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_active\"},{\"name\":\"preferences\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"lastLoginAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"last_login_at\"},{\"name\":\"agentSessions\",\"kind\":\"object\",\"type\":\"AgentSession\",\"relationName\":\"AgentSessionToUser\"},{\"name\":\"conversationExports\",\"kind\":\"object\",\"type\":\"ConversationExport\",\"relationName\":\"ConversationExportToUser\"},{\"name\":\"userSubscriptions\",\"kind\":\"object\",\"type\":\"UserSubscription\",\"relationName\":\"UserToUserSubscription\"}],\"dbName\":\"users\"},\"AgentSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"sessionTitle\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"session_title\"},{\"name\":\"contentType\",\"kind\":\"enum\",\"type\":\"ContentType\",\"dbName\":\"content_type\"},{\"name\":\"contentSource\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"content_source\"},{\"name\":\"contentUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"content_url\"},{\"name\":\"contentText\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"content_text\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SessionStatus\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"started_at\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"completed_at\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AgentSessionToUser\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"AgentMessage\",\"relationName\":\"AgentMessageToAgentSession\"},{\"name\":\"exports\",\"kind\":\"object\",\"type\":\"ConversationExport\",\"relationName\":\"AgentSessionToConversationExport\"}],\"dbName\":\"agent_sessions\"},\"AgentMessage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"session_id\"},{\"name\":\"agentType\",\"kind\":\"enum\",\"type\":\"AgentType\",\"dbName\":\"agent_type\"},{\"name\":\"messageContent\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"message_content\"},{\"name\":\"messageOrder\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"message_order\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"confidence\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"sources\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"AgentSession\",\"relationName\":\"AgentMessageToAgentSession\"}],\"dbName\":\"agent_messages\"},\"ConversationExport\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"session_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"exportFormat\",\"kind\":\"enum\",\"type\":\"ExportFormat\",\"dbName\":\"export_format\"},{\"name\":\"exportedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"exported_at\"},{\"name\":\"filePath\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"file_path\"},{\"name\":\"downloadUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"download_url\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"expires_at\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"AgentSession\",\"relationName\":\"AgentSessionToConversationExport\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationExportToUser\"}],\"dbName\":\"conversation_exports\"},\"SignalCache\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"signalType\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"signal_type\"},{\"name\":\"signalValue\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"signal_value\"},{\"name\":\"confidence\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"expires_at\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"source\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"signal_cache\"},\"UserSubscription\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"subscriptionType\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"subscription_type\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"start_date\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"end_date\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserSubscription\"}],\"dbName\":\"user_subscriptions\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)


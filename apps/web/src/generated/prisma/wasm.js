
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  clerkId: 'clerkId',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contentType: 'contentType',
  contentTitle: 'contentTitle',
  contentContent: 'contentContent',
  contentUrl: 'contentUrl',
  contentAuthor: 'contentAuthor',
  contentPublishedAt: 'contentPublishedAt',
  contentMetadata: 'contentMetadata',
  status: 'status',
  consensusReached: 'consensusReached',
  finalRecommendation: 'finalRecommendation',
  confidenceScore: 'confidenceScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  metadata: 'metadata'
};

exports.Prisma.AgentMessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  agentType: 'agentType',
  agentName: 'agentName',
  content: 'content',
  confidenceLevel: 'confidenceLevel',
  messageOrder: 'messageOrder',
  citedSources: 'citedSources',
  signalReferences: 'signalReferences',
  timestamp: 'timestamp',
  metadata: 'metadata'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Conversation: 'Conversation',
  AgentMessage: 'AgentMessage'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/philippebeliveau/Desktop/Notebook/gayed-signals-dashboard/apps/web/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/philippebeliveau/Desktop/Notebook/gayed-signals-dashboard/apps/web/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// Prisma schema for AutoGen Financial Intelligence Demo\n// Maps to conversation_models.py Pydantic models\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// User management integrated with Clerk authentication\nmodel User {\n  id        String   @id @default(cuid())\n  clerkId   String   @unique\n  email     String?\n  firstName String?\n  lastName  String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relationships\n  conversations Conversation[]\n\n  @@map(\"users\")\n}\n\n// Core conversation session - maps to ConversationSession Pydantic model\nmodel Conversation {\n  id     String @id @default(cuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  // Content source information - maps to ContentSource Pydantic model\n  contentType        String // ContentSourceType enum: \"text\", \"substack_article\", \"youtube_video\", etc.\n  contentTitle       String    @db.VarChar(500)\n  contentContent     String    @db.Text // Main content text\n  contentUrl         String?\n  contentAuthor      String?   @db.VarChar(200)\n  contentPublishedAt DateTime?\n  contentMetadata    Json      @default(\"{}\")\n\n  // Conversation state - maps to ConversationStatus enum\n  status              String  @default(\"initialized\") // \"initialized\", \"running\", \"paused\", \"completed\", \"error\", \"cancelled\"\n  consensusReached    Boolean @default(false)\n  finalRecommendation String? @db.Text\n  confidenceScore     Float?  @db.Real\n\n  // Timing\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n  completedAt DateTime?\n\n  // Metadata for additional conversation data\n  metadata Json @default(\"{}\")\n\n  // Relationships\n  messages AgentMessage[]\n\n  // Performance indexes for common query patterns\n  @@index([userId, createdAt])\n  @@index([status, createdAt])\n  @@index([contentType, createdAt])\n  @@map(\"conversations\")\n}\n\n// Individual agent messages within conversations - maps to AgentMessage Pydantic model\nmodel AgentMessage {\n  id             String       @id @default(cuid())\n  conversationId String\n  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)\n\n  // Agent information - maps to AgentType enum\n  agentType String // \"financial_analyst\", \"market_context\", \"risk_challenger\"\n  agentName String @db.VarChar(100)\n\n  // Message content\n  content         String @db.Text\n  confidenceLevel Float? @db.Real\n  messageOrder    Int\n\n  // References and sources - arrays for financial analysis citations\n  citedSources     String[] @default([])\n  signalReferences String[] @default([])\n\n  // Timing\n  timestamp DateTime @default(now())\n\n  // Metadata for additional message data\n  metadata Json @default(\"{}\")\n\n  // Performance indexes for conversation retrieval and agent analysis\n  @@index([conversationId, messageOrder])\n  @@index([agentType, timestamp])\n  @@index([timestamp])\n  @@map(\"agent_messages\")\n}\n",
  "inlineSchemaHash": "2a0de03606453a3744370c09c8b1402606e560e7b2644f163bed98c6aec6f120",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clerkId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"conversations\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToUser\"}],\"dbName\":\"users\"},\"Conversation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationToUser\"},{\"name\":\"contentType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contentTitle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contentContent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contentUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contentAuthor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contentPublishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"contentMetadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"consensusReached\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"finalRecommendation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"confidenceScore\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"AgentMessage\",\"relationName\":\"AgentMessageToConversation\"}],\"dbName\":\"conversations\"},\"AgentMessage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"AgentMessageToConversation\"},{\"name\":\"agentType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"agentName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"confidenceLevel\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"messageOrder\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"citedSources\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"signalReferences\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":\"agent_messages\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)


#!/bin/bash

# Vercel Deployment Script
# Generated by Hive Mind Collective Intelligence System

set -e

echo "üöÄ Starting Vercel Deployment..."
echo "================================="

# Check if Vercel CLI is installed
if ! command -v vercel &> /dev/null; then
    echo "‚ùå Vercel CLI not found. Please install it first:"
    echo "npm install -g vercel"
    exit 1
fi

echo "‚úÖ Vercel CLI found"

# Login check
if ! vercel whoami &> /dev/null; then
    echo "üîë Please login to Vercel..."
    vercel login
fi

echo "‚úÖ Authenticated with Vercel"

# Ensure we're in the project root
if [ ! -f "package.json" ]; then
    echo "‚ùå package.json not found. Please run from project root."
    exit 1
fi

# Create vercel.json if it doesn't exist
if [ ! -f "vercel.json" ]; then
    echo "üìã Creating vercel.json configuration..."
    cat > vercel.json << 'EOF'
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next",
      "config": {
        "maxLambdaSize": "50mb"
      }
    }
  ],
  "functions": {
    "src/app/**/*.ts": {
      "maxDuration": 30
    }
  },
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "Strict-Transport-Security",
          "value": "max-age=63072000; includeSubDomains; preload"
        },
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        }
      ]
    }
  ],
  "rewrites": [
    {
      "source": "/python-api/(.*)",
      "destination": "https://backend-production-0a4c.up.railway.app/$1"
    },
    {
      "source": "/backtrader-api/(.*)",
      "destination": "https://backtrader-production.up.railway.app/$1"
    }
  ],
  "regions": ["iad1", "sfo1"],
  "env": {
    "NODE_ENV": "production"
  }
}
EOF
    echo "‚úÖ Created vercel.json configuration"
fi

# Build the project
echo "üî® Building Next.js application..."
npm run build

# Set environment variables
echo "‚öôÔ∏è  Setting Vercel environment variables..."

# Financial Data APIs
vercel env add TIINGO_API_KEY production <<< '36181da7f5290c0544e9cc0b3b5f19249eb69a61'
vercel env add ALPHA_VANTAGE_KEY production <<< 'QM5V895I65W014U0'
vercel env add FRED_KEY production <<< '6f6919f0f4091f97951da3ae4f23d2b7'
vercel env add BUREAU_OF_STATISTIC_KEY production <<< '851cb94bc14e4244bd520053ae807ecd'

# Runtime Configuration
vercel env add NODE_ENV production <<< 'production'
vercel env add NEXT_TELEMETRY_DISABLED production <<< '1'
vercel env add MAX_ANALYSIS_TIME production <<< '30'
vercel env add MAX_REQUEST_TIMEOUT production <<< '25'

# Service URLs (external to Railway)
vercel env add PYTHON_SERVICE_URL production <<< 'https://backend-production-0a4c.up.railway.app'
vercel env add FASTAPI_BASE_URL production <<< 'https://backend-production-0a4c.up.railway.app'

# Security
vercel env add SECRET_KEY production <<< 'gayed-signals-vercel-production-2025'
vercel env add JWT_SECRET_KEY production <<< 'jwt-vercel-production-2025'

# CORS
vercel env add ALLOWED_ORIGINS production <<< 'https://gayed-signals-dashboard.vercel.app'
vercel env add CORS_ORIGINS production <<< 'https://gayed-signals-dashboard.vercel.app'

echo "‚úÖ Environment variables configured"

# Deploy to Vercel
echo "üöÄ Deploying to Vercel..."
vercel --prod --yes

# Get deployment URL
DEPLOYMENT_URL=$(vercel ls --meta | head -n 2 | tail -n 1 | awk '{print $2}')

echo ""
echo "üéâ Vercel deployment complete!"
echo "================================="
echo "‚úÖ Frontend deployed and optimized"
echo "‚úÖ Environment variables configured"
echo "‚úÖ Security headers enabled"
echo "‚úÖ API routing configured"
echo ""
echo "üîó Your application URL:"
echo "$DEPLOYMENT_URL"
echo ""
echo "üîç Test your deployment:"
echo "curl -f $DEPLOYMENT_URL/api/health"
echo ""
echo "üìä Monitor your deployment:"
echo "vercel logs $DEPLOYMENT_URL"
echo ""
echo "‚öôÔ∏è  Manage environment variables:"
echo "vercel env ls"

# Run basic health check
echo "üè• Running health check..."
sleep 10

if curl -f "$DEPLOYMENT_URL/api/health" &> /dev/null; then
    echo "‚úÖ Health check passed"
else
    echo "‚ö†Ô∏è  Health check failed - check logs: vercel logs"
fi

echo ""
echo "üéØ Next steps:"
echo "1. Ensure Railway backend services are running"
echo "2. Verify API endpoints are accessible"
echo "3. Test cross-platform communication"
echo "4. Monitor performance and errors"

exit 0
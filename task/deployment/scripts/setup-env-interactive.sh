#!/bin/bash

# Interactive Environment Variables Setup Script  
# Generated by Hive Mind Collective Intelligence System
# Safely sets up both Railway and Vercel environments from .env file

set -e

echo "üéØ HIVE MIND DEPLOYMENT - Interactive Environment Setup"
echo "======================================================="
echo ""

# Check if we're in the correct directory
if [ ! -f ".env" ]; then
    echo "‚ùå .env file not found. Please run from project root directory."
    exit 1
fi

if [ ! -f "package.json" ]; then
    echo "‚ùå package.json not found. Please run from project root directory." 
    exit 1
fi

echo "‚úÖ Found .env and package.json files"

# Load environment variables safely
set +e  # Temporarily disable exit on error for sourcing
source .env 2>/dev/null || echo "‚ö†Ô∏è Some .env variables may have formatting issues, continuing..."
set -e

echo "‚úÖ Loaded environment variables from .env"

echo ""
echo "üìä Found API Keys:"
echo "=================="
[ ! -z "$TIINGO_API_KEY" ] && echo "‚úÖ TIINGO_API_KEY: ${TIINGO_API_KEY:0:10}..."
[ ! -z "$ALPHA_VANTAGE_KEY" ] && echo "‚úÖ ALPHA_VANTAGE_KEY: ${ALPHA_VANTAGE_KEY:0:10}..."
[ ! -z "$FRED_KEY" ] && echo "‚úÖ FRED_KEY: ${FRED_KEY:0:10}..."
[ ! -z "$BUREAU_OF_STATISTIC_KEY" ] && echo "‚úÖ BUREAU_OF_STATISTIC_KEY: ${BUREAU_OF_STATISTIC_KEY:0:10}..."
[ ! -z "$OPENAI_API_KEY" ] && echo "‚úÖ OPENAI_API_KEY: ${OPENAI_API_KEY:0:10}..."
[ ! -z "$ANTHROPIC_API_KEY" ] && echo "‚úÖ ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:0:10}..."
[ ! -z "$GEMINI_API_KEY" ] && echo "‚úÖ GEMINI_API_KEY: ${GEMINI_API_KEY:0:10}..."
[ ! -z "$PERPLEXITY_API_KEY" ] && echo "‚úÖ PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY:0:10}..."

echo ""
echo "üîç Checking CLI Tools..."
echo "========================"

# Check Railway CLI
if command -v railway &> /dev/null; then
    echo "‚úÖ Railway CLI found"
    RAILWAY_AVAILABLE=true
else
    echo "‚ùå Railway CLI not found"
    echo "   Install with: curl -sSL https://railway.app/install.sh | bash"
    RAILWAY_AVAILABLE=false
fi

# Check Vercel CLI  
if command -v vercel &> /dev/null; then
    echo "‚úÖ Vercel CLI found"
    VERCEL_AVAILABLE=true
else
    echo "‚ùå Vercel CLI not found"
    echo "   Install with: npm install -g vercel"
    VERCEL_AVAILABLE=false
fi

echo ""
echo "üöÄ Deployment Options:"
echo "======================"
echo "1. Set up Railway environment variables"
echo "2. Set up Vercel environment variables" 
echo "3. Set up both platforms"
echo "4. Show environment variable summary only"
echo ""

read -p "Choose an option (1-4): " choice

case $choice in
    1)
        echo ""
        echo "üöÇ Railway Setup Selected"
        echo "========================="
        
        if [ "$RAILWAY_AVAILABLE" = false ]; then
            echo "‚ùå Railway CLI not available. Please install it first."
            exit 1
        fi
        
        echo "Please ensure you're logged in to Railway:"
        echo "If not logged in, run: railway login"
        echo ""
        read -p "Are you logged in to Railway? (y/n): " railway_logged_in
        
        if [ "$railway_logged_in" != "y" ] && [ "$railway_logged_in" != "Y" ]; then
            echo "Please login to Railway first: railway login"
            exit 1
        fi
        
        echo ""
        echo "Setting up Railway environment variables..."
        echo ""
        echo "Manual setup required:"
        echo "======================"
        echo "1. Go to: https://railway.app/dashboard"
        echo "2. Select project: df2278b8-6302-43c1-befb-60ff3458701f"
        echo "3. For each service (fastapi-backend, backtrader-service), add these variables:"
        echo ""
        echo "DATABASE_URL=\${{Postgres.DATABASE_URL}}"
        echo "REDIS_URL=\${{Redis.REDIS_URL}}"
        echo "TIINGO_API_KEY=$TIINGO_API_KEY"
        echo "ALPHA_VANTAGE_KEY=$ALPHA_VANTAGE_KEY"
        echo "FRED_KEY=$FRED_KEY"
        echo "BUREAU_OF_STATISTIC_KEY=$BUREAU_OF_STATISTIC_KEY"
        echo "OPENAI_API_KEY=$OPENAI_API_KEY"
        echo "SECRET_KEY=$SECRET_KEY"
        echo "ENVIRONMENT=production"
        echo "PORT=\${{PORT}}"
        echo "LOG_LEVEL=$LOG_LEVEL"
        
        if [ ! -z "$GEMINI_API_KEY" ]; then
            echo "GEMINI_API_KEY=$GEMINI_API_KEY"
        fi
        
        if [ ! -z "$PERPLEXITY_API_KEY" ]; then
            echo "PERPLEXITY_API_KEY=$PERPLEXITY_API_KEY"
        fi
        
        echo ""
        echo "For backtrader-service, also add:"
        echo "FLASK_ENV=production"
        echo "FLASK_HOST=0.0.0.0"
        echo "MAX_ANALYSIS_TIME=$MAX_ANALYSIS_TIME"
        echo "INITIAL_CAPITAL=$INITIAL_CAPITAL"
        echo "CORS_ORIGINS=https://gayed-signals-dashboard-alpirwn5h-philippe-beliveaus-projects.vercel.app"
        ;;
        
    2)
        echo ""
        echo "‚ñ≤ Vercel Setup Selected"
        echo "======================="
        
        if [ "$VERCEL_AVAILABLE" = false ]; then
            echo "‚ùå Vercel CLI not available. Please install it first."
            exit 1
        fi
        
        echo "Please ensure you're logged in to Vercel:"
        echo "If not logged in, run: vercel login"
        echo ""
        read -p "Are you logged in to Vercel? (y/n): " vercel_logged_in
        
        if [ "$vercel_logged_in" != "y" ] && [ "$vercel_logged_in" != "Y" ]; then
            echo "Please login to Vercel first: vercel login"
            exit 1
        fi
        
        echo ""
        echo "Setting up Vercel environment variables..."
        
        # Function to add Vercel variable
        add_vercel_var() {
            local var_name=$1
            local var_value=$2
            local environment=${3:-"production"}
            
            if [ ! -z "$var_value" ]; then
                echo "Adding $var_name to $environment..."
                printf "%s" "$var_value" | vercel env add "$var_name" "$environment" --force || echo "‚ö†Ô∏è Failed to add $var_name"
            fi
        }
        
        echo ""
        echo "Adding production environment variables..."
        add_vercel_var "NODE_ENV" "production"
        add_vercel_var "NEXT_TELEMETRY_DISABLED" "1"
        add_vercel_var "TIINGO_API_KEY" "$TIINGO_API_KEY"
        add_vercel_var "ALPHA_VANTAGE_KEY" "$ALPHA_VANTAGE_KEY"
        add_vercel_var "FRED_KEY" "$FRED_KEY"
        add_vercel_var "BUREAU_OF_STATISTIC_KEY" "$BUREAU_OF_STATISTIC_KEY"
        add_vercel_var "OPENAI_API_KEY" "$OPENAI_API_KEY"
        add_vercel_var "SECRET_KEY" "$SECRET_KEY"
        add_vercel_var "LOG_LEVEL" "$LOG_LEVEL"
        add_vercel_var "INITIAL_CAPITAL" "$INITIAL_CAPITAL"
        add_vercel_var "PYTHON_SERVICE_URL" "https://backend-production-0a4c.up.railway.app"
        add_vercel_var "FASTAPI_BASE_URL" "https://backend-production-0a4c.up.railway.app"
        add_vercel_var "MAX_ANALYSIS_TIME" "30"
        add_vercel_var "ALLOWED_ORIGINS" "https://gayed-signals-dashboard-alpirwn5h-philippe-beliveaus-projects.vercel.app"
        
        if [ ! -z "$GEMINI_API_KEY" ]; then
            add_vercel_var "GEMINI_API_KEY" "$GEMINI_API_KEY"
        fi
        
        if [ ! -z "$PERPLEXITY_API_KEY" ]; then
            add_vercel_var "PERPLEXITY_API_KEY" "$PERPLEXITY_API_KEY"
        fi
        
        echo "‚úÖ Vercel environment variables configured"
        ;;
        
    3)
        echo ""
        echo "üéØ Both Platforms Setup Selected"
        echo "================================"
        echo "This will guide you through setting up both Railway and Vercel."
        echo "Please follow the instructions for each platform."
        echo ""
        
        # Railway setup
        if [ "$RAILWAY_AVAILABLE" = true ]; then
            echo "First, let's set up Railway..."
            $0  # Recursively call this script for Railway setup
        else
            echo "‚ö†Ô∏è Railway CLI not available - skipping Railway setup"
        fi
        
        echo ""
        
        # Vercel setup  
        if [ "$VERCEL_AVAILABLE" = true ]; then
            echo "Now, let's set up Vercel..."
            $0  # Recursively call this script for Vercel setup
        else
            echo "‚ö†Ô∏è Vercel CLI not available - skipping Vercel setup"
        fi
        ;;
        
    4)
        echo ""
        echo "üìã Environment Variable Summary"
        echo "==============================="
        echo ""
        echo "üìä Configuration from .env file:"
        echo "NODE_ENV: ${NODE_ENV:-'not set'}"
        echo "LOG_LEVEL: ${LOG_LEVEL:-'not set'}"
        echo "MAX_ANALYSIS_TIME: ${MAX_ANALYSIS_TIME:-'not set'}"
        echo "INITIAL_CAPITAL: ${INITIAL_CAPITAL:-'not set'}"
        echo "SECRET_KEY: ${SECRET_KEY:0:10}... (${#SECRET_KEY} chars)"
        echo ""
        echo "üîë API Keys Status:"
        [ ! -z "$TIINGO_API_KEY" ] && echo "‚úÖ TIINGO_API_KEY (${#TIINGO_API_KEY} chars)" || echo "‚ùå TIINGO_API_KEY not set"
        [ ! -z "$ALPHA_VANTAGE_KEY" ] && echo "‚úÖ ALPHA_VANTAGE_KEY (${#ALPHA_VANTAGE_KEY} chars)" || echo "‚ùå ALPHA_VANTAGE_KEY not set"
        [ ! -z "$FRED_KEY" ] && echo "‚úÖ FRED_KEY (${#FRED_KEY} chars)" || echo "‚ùå FRED_KEY not set"
        [ ! -z "$BUREAU_OF_STATISTIC_KEY" ] && echo "‚úÖ BUREAU_OF_STATISTIC_KEY (${#BUREAU_OF_STATISTIC_KEY} chars)" || echo "‚ùå BUREAU_OF_STATISTIC_KEY not set"
        [ ! -z "$OPENAI_API_KEY" ] && echo "‚úÖ OPENAI_API_KEY (${#OPENAI_API_KEY} chars)" || echo "‚ùå OPENAI_API_KEY not set"
        [ ! -z "$ANTHROPIC_API_KEY" ] && echo "‚úÖ ANTHROPIC_API_KEY (${#ANTHROPIC_API_KEY} chars)" || echo "‚ùå ANTHROPIC_API_KEY not set"
        [ ! -z "$GEMINI_API_KEY" ] && echo "‚úÖ GEMINI_API_KEY (${#GEMINI_API_KEY} chars)" || echo "‚ùå GEMINI_API_KEY not set"
        [ ! -z "$PERPLEXITY_API_KEY" ] && echo "‚úÖ PERPLEXITY_API_KEY (${#PERPLEXITY_API_KEY} chars)" || echo "‚ùå PERPLEXITY_API_KEY not set"
        ;;
        
    *)
        echo "Invalid option selected."
        exit 1
        ;;
esac

echo ""
echo "üéâ Setup Complete!"
echo "=================="
echo ""
echo "üîç Next Steps:"
echo "1. Verify Railway services are healthy:"
echo "   curl https://backend-production-0a4c.up.railway.app/health"
echo "   curl https://backtrader-production.up.railway.app/health"
echo ""
echo "2. Test Vercel frontend:"
echo "   curl https://gayed-signals-dashboard-alpirwn5h-philippe-beliveaus-projects.vercel.app/api/health"
echo ""
echo "3. Run validation script:"
echo "   ./task/deployment/scripts/validate-deployment.sh"

exit 0
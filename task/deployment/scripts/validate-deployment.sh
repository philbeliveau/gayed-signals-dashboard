#!/bin/bash

# Deployment Validation Script
# Generated by Hive Mind Collective Intelligence System

set -e

echo "üîç Starting Deployment Validation..."
echo "===================================="

# Configuration
VERCEL_URL="https://gayed-signals-dashboard-alpirwn5h-philippe-beliveaus-projects.vercel.app"
RAILWAY_BACKEND_URL="https://backend-production-0a4c.up.railway.app"
RAILWAY_BACKTRADER_URL="https://backtrader-production.up.railway.app"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test counter
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Test function
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_code="$3"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    
    echo -n "Testing $test_name... "
    
    if eval "$test_command" &> /dev/null; then
        echo -e "${GREEN}‚úÖ PASSED${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
        return 0
    else
        echo -e "${RED}‚ùå FAILED${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
        return 1
    fi
}

# Test frontend health
echo -e "${BLUE}üìã Frontend Tests${NC}"
run_test "Frontend Health Endpoint" "curl -f -s $VERCEL_URL/api/health"
run_test "Frontend Root Page" "curl -f -s $VERCEL_URL"
run_test "Frontend Login Page" "curl -f -s $VERCEL_URL/login"

# Test backend services
echo -e "${BLUE}üìã Backend Services Tests${NC}"
run_test "FastAPI Backend Health" "curl -f -s $RAILWAY_BACKEND_URL/health"
run_test "Backtrader Service Health" "curl -f -s $RAILWAY_BACKTRADER_URL/health"

# Test API endpoints
echo -e "${BLUE}üìã API Endpoints Tests${NC}"
run_test "Housing Data API" "curl -f -s $VERCEL_URL/api/housing"
run_test "Labor Data API" "curl -f -s $VERCEL_URL/api/labor"  
run_test "Trading Signals API" "curl -f -s $VERCEL_URL/api/signals"
run_test "Chart Generation API" "curl -f -s $VERCEL_URL/api/chart"

# Test cross-service communication
echo -e "${BLUE}üìã Cross-Service Communication Tests${NC}"
run_test "Frontend to Backend Proxy" "curl -f -s $VERCEL_URL/python-api/health"
run_test "Frontend to Backtrader Proxy" "curl -f -s $VERCEL_URL/backtrader-api/health"

# Test performance
echo -e "${BLUE}üìã Performance Tests${NC}"

# Response time test
echo -n "Testing API response times... "
START_TIME=$(date +%s%N)
curl -f -s "$VERCEL_URL/api/signals" > /dev/null
END_TIME=$(date +%s%N)
RESPONSE_TIME=$(( (END_TIME - START_TIME) / 1000000 ))

if [ $RESPONSE_TIME -lt 2000 ]; then
    echo -e "${GREEN}‚úÖ PASSED${NC} (${RESPONSE_TIME}ms)"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${YELLOW}‚ö†Ô∏è  SLOW${NC} (${RESPONSE_TIME}ms)"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

# Load test
echo -n "Testing concurrent requests... "
CONCURRENT_REQUESTS=5
SUCCESS_COUNT=0

for i in $(seq 1 $CONCURRENT_REQUESTS); do
    if curl -f -s "$VERCEL_URL/api/health" > /dev/null; then
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
    fi &
done

wait

if [ $SUCCESS_COUNT -eq $CONCURRENT_REQUESTS ]; then
    echo -e "${GREEN}‚úÖ PASSED${NC} (${SUCCESS_COUNT}/${CONCURRENT_REQUESTS})"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}‚ùå FAILED${NC} (${SUCCESS_COUNT}/${CONCURRENT_REQUESTS})"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

# Security tests
echo -e "${BLUE}üìã Security Tests${NC}"
run_test "HTTPS Enforcement" "curl -f -s -I $VERCEL_URL | grep -i 'strict-transport-security'"
run_test "XSS Protection Headers" "curl -f -s -I $VERCEL_URL | grep -i 'x-xss-protection'"
run_test "Content Type Security" "curl -f -s -I $VERCEL_URL | grep -i 'x-content-type-options'"

# Data integrity tests
echo -e "${BLUE}üìã Data Integrity Tests${NC}"

# Test FRED API data
echo -n "Testing FRED API data integrity... "
HOUSING_DATA=$(curl -f -s "$VERCEL_URL/api/housing")
if echo "$HOUSING_DATA" | grep -q '"data":\[' && echo "$HOUSING_DATA" | grep -q '"source":"FRED"'; then
    echo -e "${GREEN}‚úÖ PASSED${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}‚ùå FAILED${NC}"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

# Test trading signals calculation
echo -n "Testing trading signals calculation... "
SIGNALS_DATA=$(curl -f -s "$VERCEL_URL/api/signals")
if echo "$SIGNALS_DATA" | grep -q '"consensus":' && echo "$SIGNALS_DATA" | grep -q '"confidence":'; then
    echo -e "${GREEN}‚úÖ PASSED${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}‚ùå FAILED${NC}"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

# Generate report
echo ""
echo -e "${BLUE}üìä Validation Report${NC}"
echo "===================="
echo "Total Tests: $TOTAL_TESTS"
echo -e "Passed: ${GREEN}$PASSED_TESTS${NC}"
echo -e "Failed: ${RED}$FAILED_TESTS${NC}"

PASS_RATE=$(( PASSED_TESTS * 100 / TOTAL_TESTS ))
echo "Pass Rate: $PASS_RATE%"

echo ""
if [ $PASS_RATE -ge 90 ]; then
    echo -e "${GREEN}üéâ DEPLOYMENT VALIDATION: EXCELLENT${NC}"
    echo -e "${GREEN}‚úÖ System is production ready${NC}"
    exit 0
elif [ $PASS_RATE -ge 75 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  DEPLOYMENT VALIDATION: GOOD${NC}"
    echo -e "${YELLOW}‚ö° System is functional with minor issues${NC}"
    exit 0
else
    echo -e "${RED}‚ùå DEPLOYMENT VALIDATION: NEEDS ATTENTION${NC}"
    echo -e "${RED}üîß System requires fixes before production use${NC}"
    exit 1
fi
#!/bin/bash

# Complete Environment Variables Setup Script  
# Generated by Hive Mind Collective Intelligence System
# Sets up both Railway and Vercel environments from .env file

set -e

echo "üéØ HIVE MIND DEPLOYMENT - Environment Setup"
echo "==========================================="
echo "Setting up environment variables for both Railway and Vercel"
echo "Using values from existing .env file"
echo ""

# Check if we're in the correct directory
if [ ! -f ".env" ]; then
    echo "‚ùå .env file not found. Please run from project root directory."
    exit 1
fi

if [ ! -f "package.json" ]; then
    echo "‚ùå package.json not found. Please run from project root directory." 
    exit 1
fi

echo "‚úÖ Found .env and package.json files"

# Load environment variables
source .env
echo "‚úÖ Loaded environment variables from .env"

# Check required CLI tools
echo ""
echo "üîç Checking required CLI tools..."

# Check Railway CLI
if ! command -v railway &> /dev/null; then
    echo "‚ùå Railway CLI not found. Please install:"
    echo "curl -sSL https://railway.app/install.sh | bash"
    RAILWAY_AVAILABLE=false
else
    echo "‚úÖ Railway CLI found"
    if railway whoami &> /dev/null; then
        echo "‚úÖ Railway CLI authenticated"
        RAILWAY_AVAILABLE=true
    else
        echo "‚ö†Ô∏è  Railway CLI not authenticated. Run: railway login"
        RAILWAY_AVAILABLE=false
    fi
fi

# Check Vercel CLI  
if ! command -v vercel &> /dev/null; then
    echo "‚ùå Vercel CLI not found. Please install:"
    echo "npm install -g vercel"
    VERCEL_AVAILABLE=false
else
    echo "‚úÖ Vercel CLI found"
    if vercel whoami &> /dev/null; then
        echo "‚úÖ Vercel CLI authenticated"
        VERCEL_AVAILABLE=true
    else
        echo "‚ö†Ô∏è  Vercel CLI not authenticated. Run: vercel login"
        VERCEL_AVAILABLE=false
    fi
fi

echo ""
echo "üìä Environment Variable Summary from .env:"
echo "==========================================="
echo "üîë API Keys Found:"
[ ! -z "$TIINGO_API_KEY" ] && echo "  ‚úÖ TIINGO_API_KEY: ${TIINGO_API_KEY:0:10}..."
[ ! -z "$ALPHA_VANTAGE_KEY" ] && echo "  ‚úÖ ALPHA_VANTAGE_KEY: ${ALPHA_VANTAGE_KEY:0:10}..."
[ ! -z "$FRED_KEY" ] && echo "  ‚úÖ FRED_KEY: ${FRED_KEY:0:10}..."
[ ! -z "$BUREAU_OF_STATISTIC_KEY" ] && echo "  ‚úÖ BUREAU_OF_STATISTIC_KEY: ${BUREAU_OF_STATISTIC_KEY:0:10}..."
[ ! -z "$OPENAI_API_KEY" ] && echo "  ‚úÖ OPENAI_API_KEY: ${OPENAI_API_KEY:0:10}..."
[ ! -z "$ANTHROPIC_API_KEY" ] && echo "  ‚úÖ ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:0:10}..."
[ ! -z "$GEMINI_API_KEY" ] && echo "  ‚úÖ GEMINI_API_KEY: ${GEMINI_API_KEY:0:10}..."
[ ! -z "$PERPLEXITY_API_KEY" ] && echo "  ‚úÖ PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY:0:10}..."
[ ! -z "$SUPABASE_API_KEY" ] && echo "  ‚úÖ SUPABASE_API_KEY: ${SUPABASE_API_KEY:0:10}..."
[ ! -z "$QDRANT_API_KEY" ] && echo "  ‚úÖ QDRANT_API_KEY: ${QDRANT_API_KEY:0:10}..."
[ ! -z "$PUBMED_API_KEY" ] && echo "  ‚úÖ PUBMED_API_KEY: ${PUBMED_API_KEY:0:10}..."
[ ! -z "$GNEWS_API_KEY" ] && echo "  ‚úÖ GNEWS_API_KEY: ${GNEWS_API_KEY:0:10}..."
[ ! -z "$REDDIT_API_KEY" ] && echo "  ‚úÖ REDDIT_API_KEY: ${REDDIT_API_KEY:0:10}..."

echo ""
echo "‚öôÔ∏è  Configuration Settings:"
echo "  NODE_ENV: $NODE_ENV"
echo "  LOG_LEVEL: $LOG_LEVEL"
echo "  MAX_ANALYSIS_TIME: $MAX_ANALYSIS_TIME"
echo "  INITIAL_CAPITAL: $INITIAL_CAPITAL"

# Setup Railway Environment
if [ "$RAILWAY_AVAILABLE" = true ]; then
    echo ""
    echo "üöÇ Setting up Railway Environment Variables..."
    echo "=============================================="
    
    # Function to set Railway variable
    set_railway_var() {
        local service=$1
        local var_name=$2
        local var_value=$3
        
        if [ ! -z "$var_value" ]; then
            echo "  Setting $var_name for $service..."
            railway variables set "$var_name=$var_value" --service "$service" 2>/dev/null || echo "    ‚ö†Ô∏è Warning: Failed to set $var_name for $service"
        fi
    }
    
    # FastAPI Backend Service
    echo ""
    echo "üîß Configuring FastAPI Backend..."
    FASTAPI_SERVICE="fastapi-backend"
    
    set_railway_var "$FASTAPI_SERVICE" "DATABASE_URL" "\${{Postgres.DATABASE_URL}}"
    set_railway_var "$FASTAPI_SERVICE" "REDIS_URL" "\${{Redis.REDIS_URL}}"
    set_railway_var "$FASTAPI_SERVICE" "TIINGO_API_KEY" "$TIINGO_API_KEY"
    set_railway_var "$FASTAPI_SERVICE" "ALPHA_VANTAGE_KEY" "$ALPHA_VANTAGE_KEY"
    set_railway_var "$FASTAPI_SERVICE" "FRED_KEY" "$FRED_KEY"
    set_railway_var "$FASTAPI_SERVICE" "BUREAU_OF_STATISTIC_KEY" "$BUREAU_OF_STATISTIC_KEY"
    set_railway_var "$FASTAPI_SERVICE" "OPENAI_API_KEY" "$OPENAI_API_KEY"
    set_railway_var "$FASTAPI_SERVICE" "ANTHROPIC_API_KEY" "$ANTHROPIC_API_KEY"
    set_railway_var "$FASTAPI_SERVICE" "GEMINI_API_KEY" "$GEMINI_API_KEY"
    set_railway_var "$FASTAPI_SERVICE" "PERPLEXITY_API_KEY" "$PERPLEXITY_API_KEY"
    set_railway_var "$FASTAPI_SERVICE" "SECRET_KEY" "$SECRET_KEY"
    set_railway_var "$FASTAPI_SERVICE" "ENVIRONMENT" "production"
    set_railway_var "$FASTAPI_SERVICE" "NODE_ENV" "production"
    set_railway_var "$FASTAPI_SERVICE" "PORT" "\${{PORT}}"
    set_railway_var "$FASTAPI_SERVICE" "LOG_LEVEL" "$LOG_LEVEL"
    set_railway_var "$FASTAPI_SERVICE" "ALLOWED_ORIGINS" "https://gayed-signals-dashboard-alpirwn5h-philippe-beliveaus-projects.vercel.app"
    
    # Backtrader Service  
    echo ""
    echo "üîß Configuring Backtrader Service..."
    BACKTRADER_SERVICE="backtrader-service"
    
    set_railway_var "$BACKTRADER_SERVICE" "DATABASE_URL" "\${{Postgres.DATABASE_URL}}"
    set_railway_var "$BACKTRADER_SERVICE" "REDIS_URL" "\${{Redis.REDIS_URL}}"
    set_railway_var "$BACKTRADER_SERVICE" "TIINGO_API_KEY" "$TIINGO_API_KEY"
    set_railway_var "$BACKTRADER_SERVICE" "ALPHA_VANTAGE_KEY" "$ALPHA_VANTAGE_KEY"
    set_railway_var "$BACKTRADER_SERVICE" "FRED_KEY" "$FRED_KEY"
    set_railway_var "$BACKTRADER_SERVICE" "BUREAU_OF_STATISTIC_KEY" "$BUREAU_OF_STATISTIC_KEY"
    set_railway_var "$BACKTRADER_SERVICE" "OPENAI_API_KEY" "$OPENAI_API_KEY"
    set_railway_var "$BACKTRADER_SERVICE" "SECRET_KEY" "$SECRET_KEY"
    set_railway_var "$BACKTRADER_SERVICE" "FLASK_ENV" "production"
    set_railway_var "$BACKTRADER_SERVICE" "PORT" "\${{PORT}}"
    set_railway_var "$BACKTRADER_SERVICE" "FLASK_HOST" "0.0.0.0"
    set_railway_var "$BACKTRADER_SERVICE" "LOG_LEVEL" "$LOG_LEVEL"
    set_railway_var "$BACKTRADER_SERVICE" "MAX_ANALYSIS_TIME" "$MAX_ANALYSIS_TIME"
    set_railway_var "$BACKTRADER_SERVICE" "INITIAL_CAPITAL" "$INITIAL_CAPITAL"
    set_railway_var "$BACKTRADER_SERVICE" "CORS_ORIGINS" "https://gayed-signals-dashboard-alpirwn5h-philippe-beliveaus-projects.vercel.app"
    
    echo "‚úÖ Railway environment variables configured"
    
else
    echo ""
    echo "‚ö†Ô∏è  Skipping Railway setup - CLI not available or not authenticated"
fi

# Setup Vercel Environment  
if [ "$VERCEL_AVAILABLE" = true ]; then
    echo ""
    echo "‚ñ≤ Setting up Vercel Environment Variables..."
    echo "============================================"
    
    # Function to add Vercel variable
    add_vercel_var() {
        local var_name=$1
        local var_value=$2
        local environment=${3:-"production"}
        
        if [ ! -z "$var_value" ]; then
            echo "  Adding $var_name to $environment..."
            echo "$var_value" | vercel env add "$var_name" "$environment" --force 2>/dev/null || echo "    ‚ö†Ô∏è Warning: Failed to add $var_name"
        fi
    }
    
    # Production Environment
    echo ""
    echo "üîß Configuring Production Environment..."
    
    add_vercel_var "NODE_ENV" "production"
    add_vercel_var "NEXT_TELEMETRY_DISABLED" "1"
    add_vercel_var "TIINGO_API_KEY" "$TIINGO_API_KEY"
    add_vercel_var "ALPHA_VANTAGE_KEY" "$ALPHA_VANTAGE_KEY"
    add_vercel_var "FRED_KEY" "$FRED_KEY"
    add_vercel_var "BUREAU_OF_STATISTIC_KEY" "$BUREAU_OF_STATISTIC_KEY"
    add_vercel_var "OPENAI_API_KEY" "$OPENAI_API_KEY"
    add_vercel_var "ANTHROPIC_API_KEY" "$ANTHROPIC_API_KEY"
    add_vercel_var "GEMINI_API_KEY" "$GEMINI_API_KEY"
    add_vercel_var "PERPLEXITY_API_KEY" "$PERPLEXITY_API_KEY"
    add_vercel_var "SECRET_KEY" "$SECRET_KEY"
    add_vercel_var "LOG_LEVEL" "$LOG_LEVEL"
    add_vercel_var "INITIAL_CAPITAL" "$INITIAL_CAPITAL"
    add_vercel_var "PYTHON_SERVICE_URL" "https://backend-production-0a4c.up.railway.app"
    add_vercel_var "FASTAPI_BASE_URL" "https://backend-production-0a4c.up.railway.app"
    add_vercel_var "MAX_ANALYSIS_TIME" "30"
    add_vercel_var "MAX_REQUEST_TIMEOUT" "25"
    add_vercel_var "ALLOWED_ORIGINS" "https://gayed-signals-dashboard-alpirwn5h-philippe-beliveaus-projects.vercel.app"
    
    echo "‚úÖ Vercel environment variables configured"
    
else
    echo ""
    echo "‚ö†Ô∏è  Skipping Vercel setup - CLI not available or not authenticated"
fi

# Final Summary
echo ""
echo "üéâ Environment Setup Summary"
echo "============================"

if [ "$RAILWAY_AVAILABLE" = true ]; then
    echo "‚úÖ Railway: Environment variables configured"
    echo "   - FastAPI Backend: Production ready"
    echo "   - Backtrader Service: Production ready"  
    echo "   - Database: Using Railway managed PostgreSQL"
    echo "   - Cache: Using Railway managed Redis"
else
    echo "‚ùå Railway: Skipped (CLI not available or not authenticated)"
fi

if [ "$VERCEL_AVAILABLE" = true ]; then
    echo "‚úÖ Vercel: Environment variables configured"
    echo "   - Production environment: All API keys set"
    echo "   - Backend URLs: Pointing to Railway services"
    echo "   - Serverless optimizations: Applied"
else
    echo "‚ùå Vercel: Skipped (CLI not available or not authenticated)"
fi

echo ""
echo "üîç Next Steps:"
echo "=============="

if [ "$RAILWAY_AVAILABLE" = true ]; then
    echo "1. Check Railway service status:"
    echo "   railway status"
    echo ""
    echo "2. Verify environment variables:"
    echo "   railway variables --service fastapi-backend"
    echo "   railway variables --service backtrader-service"
    echo ""
    echo "3. Test service health:"
    echo "   curl https://backend-production-0a4c.up.railway.app/health"
    echo "   curl https://backtrader-production.up.railway.app/health"
fi

if [ "$VERCEL_AVAILABLE" = true ]; then
    echo ""
    echo "4. Verify Vercel environment:"
    echo "   vercel env ls"
    echo ""  
    echo "5. Test frontend health:"
    echo "   curl https://gayed-signals-dashboard-alpirwn5h-philippe-beliveaus-projects.vercel.app/api/health"
fi

echo ""
echo "üöÄ Your trading platform should now be fully configured!"
echo "All real API keys from .env have been applied to both platforms."

exit 0
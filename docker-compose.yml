version: '3.8'

services:
  # Next.js Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PYTHON_SERVICE_URL=http://backend:5000
      - PYTHON_SERVICE_PORT=5000
      - FASTAPI_BASE_URL=http://video-insights-api:8002
      - TIINGO_API_KEY=${TIINGO_API_KEY}
      - ALPHA_VANTAGE_KEY=${ALPHA_VANTAGE_KEY}
      - FRED_KEY=${FRED_KEY}
      - BUREAU_OF_STATISTIC_KEY=${BUREAU_OF_STATISTIC_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      - backend
      - video-insights-api
      - redis
    networks:
      - gayed-signals-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Python Backend Service
  backend:
    build:
      context: ./python-services/backtrader-analysis
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_PORT=5000
      - FLASK_HOST=0.0.0.0
      - LOG_LEVEL=INFO
      - MAX_ANALYSIS_TIME=600
      - INITIAL_CAPITAL=100000
      - CORS_ORIGINS=http://frontend:3000,http://localhost:3000
      - TIINGO_API_KEY=${TIINGO_API_KEY}
      - ALPHA_VANTAGE_KEY=${ALPHA_VANTAGE_KEY}
      - FRED_KEY=${FRED_KEY}
      - BUREAU_OF_STATISTIC_KEY=${BUREAU_OF_STATISTIC_KEY}
    volumes:
      - ./python-services/backtrader-analysis/logs:/app/logs
      - ./python-services/backtrader-analysis/static/charts:/app/static/charts
      - backend-data:/app/data
    networks:
      - gayed-signals-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Video Insights FastAPI Service
  video-insights-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/video_insights
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ALLOWED_ORIGINS=http://frontend:3000,http://localhost:3000
      - ENVIRONMENT=development
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    volumes:
      - ./backend/temp:/app/temp
      - video-insights-data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - gayed-signals-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database for Video Insights
  postgres:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=video_insights
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - gayed-signals-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - gayed-signals-network
    restart: unless-stopped
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A core.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/video_insights
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    volumes:
      - ./backend/temp:/app/temp
      - video-insights-data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - gayed-signals-network
    restart: unless-stopped

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - gayed-signals-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

# Persistent Volumes
volumes:
  backend-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  video-insights-data:
    driver: local

# Network Configuration
networks:
  gayed-signals-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16